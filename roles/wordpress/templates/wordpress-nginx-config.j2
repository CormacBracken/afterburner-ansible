{% if domainRedirects is defined %}
## redirect server blocks
{% for _domain in domainRedirects %}
server {
  listen 80;
  server_name {{ _domain.src }};
  return 301 $scheme://{{ _domain.dest }}$request_uri;
}

{% endfor %}
{% endif %}

{% for _domain in listenDomains %}
## BEGIN: {{ _domain }}
server {
  listen 80;
  server_name {{ _domain }};

  ## logs
  access_log /var/log/nginx/{{ applicationName }}-access.log;
  error_log /var/log/nginx/{{ applicationName }}-error.log;

  ## 405 unsupported http methods
  if ($not_allowed_method) {
    return 405;
  }

  ## files/directories that are system/hidden file types
  location ~* /(?:\.|package\.json) {
    return 404;
  }

  ## if maintenance page is present, set maintenance to 1
  if (-f /var/www/{{ applicationName }}/htdocs/maintenance.html) {
    set $maintenance 1;
  }

  ## if the source ip is allowed, set maintenance to 0
  if ($allowed_during_maintenance) {
    set $maintenance 0;
  }

  ## if maintenance is still 1, return a 503 by mapping to an internal location
  ## block that only serves the maintenance page
  if ($maintenance) {
    return 503;
  }

  error_page 503 @maintenance;
  location @maintenance {
    root     /var/www/{{ applicationName }}/htdocs;
    rewrite  ^(.*)$  /maintenance.html;
    break;
  }

{% if uriRedirects is defined %}
  ## 301 redirects
{% for _redirect in uriRedirects|groupby('domain') %}
{% for _rewrite in _redirect.list if _rewrite.domain == _domain %}
  rewrite {{ _rewrite.src }} {{ _rewrite.dest }} permanent;
{% endfor %}

{% endfor %}
{% endif %}

  ## set error pages
  recursive_error_pages        on;

  error_page   401             /401.html;
  error_page   403             /403.html;
  error_page   404             /404.html;
  error_page   405             /405.html;
  error_page   500 502 504     /50x.html;

  ## normalize the user agent so we can construct a cache key based on it
  set $normalized_ua "normal";

  if ($http_user_agent ~* "(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino") {
    set $normalized_ua "mobile";
  }

  if ($http_user_agent ~* "^(1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)") {
    set $normalized_ua "mobile-maybe";
  }

  ## fastcgi cache settings
  fastcgi_cache_key          $request_method$normalized_ua$scheme$host$request_uri$args;
  fastcgi_cache_lock         on;
  fastcgi_cache_lock_timeout 6s;
  fastcgi_cache_use_stale    error timeout invalid_header updating http_500 http_503;
  fastcgi_ignore_headers     Cache-Control Expires Set-Cookie;

  ## cache bypass rules, cache everything by default
  set $no_cache              {{ 0 if outputCache else 1 }};

  ## POST means that it's not a cacheable request
  if ($request_method = POST) {
    set $no_cache 1;
    set $no_cache_why "POST";
  }

  ## if known WP cookie, no cache
  if ($http_cookie ~ (?:comment_author_|wordpress_logged_in|wp-postpass_)) {
    set $no_cache 1;
    set $no_cache_why "Cookie";
  }

  ## direct requests to wp-*.php pages or anything wp-admin is never cached
  if ($request_uri ~* wp\-[^/]*\.php|wp\-admin) {
    set $no_cache 1;
    set $no_cache_why "WPCore";
  }

{% if cacheBypassCookies %}
  ## other cookies that should bypass output caching
  if ($http_cookie ~ ({{ cacheBypassCookies|join('|') }}) {
    set $no_cache 1;
    set $no_cache_why "OtherCookie";
  }
{% endif %}

  ## rewrite rules
  rewrite /wp-admin$ $scheme://$host$uri/ permanent;
{% if isMultisite and not isSubdomainInstall %}
  if (!-e $request_filename) {
    rewrite ^(/[^/]+)?(/wp-.*) $2 last;
    rewrite ^(/[^/]+)?(/.*\.php) $2 last;
  }
{% endif %}

  ## set document root
  root /var/www/{{ applicationName }}/htdocs;
  index index.php index.html index.htm;

  ## server location blocks, most to least specific
  ## robots block - checks for physical file before trying backend
  location = /robots.txt {
    access_log off;
    try_files /robots.txt /index.php?q=$uri;
  }

  ## favicon - try for file or send empty_gif
  location = /favicon.ico {
    access_log off;
    try_files /favicon.ico @empty;
  }

  ## static assets on disk
  location ~* ^.+\.(?:jpe?g|gif|png|css|js|ico|zip|7z|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|midi?|wav|bmp|rtf|avi|mp\\d|mpg|iso|mov|djvu|dmg|flac|r70|mdf|chm|sisx|sis|flv|thm|bin|swf|xml|cert|otf|ttf|eot|svgx?|woff|xsl)$ {
    access_log          /var/log/nginx/{{ applicationName }}-access-statics.log;
    log_not_found       off;

    ## max size, if larger - just stream the asset
    fastcgi_max_temp_file_size  2m;

    tcp_nodelay off;

    ## open file caching
    open_file_cache max=3000 inactive=120s;
    open_file_cache_valid 45s;
    open_file_cache_min_uses 2;
    open_file_cache_errors off;

    if_modified_since       before;

    ## set headers for expiry based on the fastcgi_cache_valid statements
    more_set_headers      -s '200' "Cache-Control: max-age=2764800, must-revalidate";
    more_set_headers      -s '301 302 404' "Cache-Control: max-age=60, must-revalidate";

    ## add cache/miss hit header
    more_set_headers      "X-Cache-Info: static";

{% if isMultisite and not isSubdomainInstall %}
    ## wordpress multisite in a sub-folder static rewrites
    rewrite ^.+(/wp-admin/.+)$ $1 break;
    rewrite ^.+(/wp-content/.+)$ $1 break;
    rewrite ^.+(/wp-includes/.+)$ $1 break;
{% endif %}

    try_files $uri =404;
  }

  ## main server location block
  location / {
    ## connections per IP/requests per second per IP limits
    limit_conn  connection_limit   30;
    limit_req   zone=request_limit burst=200 nodelay;

    ## try_files on $uri, otherwise pass to index.php
    try_files $uri $uri/ /index.php?$args;
  }

  location ~ \.php$ {
    ## connections per IP/requests per second per IP limits
    limit_conn  connection_limit   30;
    limit_req   zone=request_limit burst=200 nodelay;

    try_files $uri =404;

    ## if we can't cache, add proper no cache headers
    if ($no_cache = "1") {
      more_set_headers  "X-No-Cache: $no_cache_why";
      more_set_headers  "Expires: Mon, 14 Sep 1981 05:00:00 GMT";
      more_set_headers  "Cache-Control: no-cache, must-revalidate, max-age=0";
      more_set_headers  "Pragma: no-cache";
    }

    ## let the browser know we vary on cookie and encoding
    more_set_headers  "Vary: User-Agent, Accept-Encoding, Cookie";
    more_set_headers  -s '200 301' "X-Cache-Status: $upstream_cache_status";

    ## cache responses in the short zone unless no_cache=1
    fastcgi_cache        fastcgi_short;
    fastcgi_cache_bypass $no_cache;
    fastcgi_no_cache     $no_cache;

    ## how to cache various responses
    fastcgi_cache_valid     200 301 3m;
    fastcgi_cache_valid     302 307 404 1m;

    ## pass the request upstream
    include        /etc/nginx/fastcgi_params;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param  PATH_INFO $fastcgi_script_name;
    fastcgi_pass   unix:/var/www/{{ applicationName }}/tmp/php5-fpm.sock;
    break;
  }

  location @empty {
    empty_gif;
  }
}

## END: {{ _domain }}
{% endfor %}
